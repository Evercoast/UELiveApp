

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"

float3 BoundsMin;
float BoundsDim;

/**
 * Vertex attributes to fetch.
 */
struct FVertexFactoryInput
{
	/** Unique vertex ID. */
	uint VertexId : SV_VertexID;
	/** This doesn't use instancing */
	uint InstanceId : SV_InstanceID;
};

typedef FVertexFactoryInput FPositionAndNormalOnlyVertexFactoryInput;
typedef FVertexFactoryInput FPositionOnlyVertexFactoryInput;

/**
 * Attributes to interpolate from the vertex shader to the pixel shader.
 */
struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK
	
	/** Dummy value to interpolate. */
	float2 DummyTexCoord : TEXCOORD0;

	half4 Color : COLOR0;
	
#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};

/**
 * Intermediate values computed in the vertex shader.
 */
struct FVertexFactoryIntermediates
{
	/** The position of the vertex in translated world space */
	float4 Position;
	/** The Voxel's tangent in world space (+V) */
    float3x3 TangentToLocal;
    float3x3 TangentToWorld;
    half TangentToWorldSign;
	/** The color of the sprite. */
	half4 Color;
#if EVERCOAST_ON_UE5
	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
#endif
};

#if EVERCOAST_ON_UE5
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}
#endif

float3 SafeNormalize(float3 V)
{
    return V * rsqrt(max(dot(V, V), 0.01));
}

/**
 * Compute the tangents for a Voxel
 *
 * @param OutUp - The tangent vector Voxeling up in screen space.
 * @param OutRight - The tangent vector Voxeling right in screen space.
 * @param VoxelTranslatedWorldPosition - Translated world position of the Voxel
 */
float3x3 GetVoxelTangentToLocal(uint VertexId)
{
    const float3x3 FaceTangents[6] =
    {
        float3x3(1, 0, 0, 0, 1, 0, 0, 0, 1), // 0 +z
		float3x3(1, 0, 0, 0, 0, 1, 0, 1, 0), // 1 +y
		float3x3(0, 0, 1, 0, 1, 0, 1, 0, 0), // 2 +x
		float3x3(1, 0, 0, 0, 1, 0, 0, 0, -1), // 3 -z
		float3x3(1, 0, 0, 0, 0, 1, 0, -1, 0), // 4 -y
		float3x3(0, 0, 1, 0, 1, 0, -1,  0,  0), // 5 -x
    };
	
    uint OffsetIndex = VertexId % 8;
    uint FaceIdx = ((VertexId - OffsetIndex) % 48) / 8;

    return FaceTangents[FaceIdx];
}

/**
 * Fetches the Voxel's location from the Voxel location buffer
 *
 * @param Input the vertex factory input
 *
 * @return the position of the Voxel
 */
float3 GetVoxelLocation(uint VertexId)
{
    const float size = 0.5f;
	const float3 PositionOffsets[8] =
    {
        float3(-size, -size,  size), // 0
		float3( size, -size,  size), // 1
		float3(-size,  size,  size), // 2
		float3( size,  size,  size), // 3
		float3(-size, -size, -size), // 4
		float3( size, -size, -size), // 5
		float3(-size,  size, -size), // 6
		float3( size,  size, -size)  // 7
    };
	// Load the Voxel's location
    uint InstanceId = VertexId / 48;
    uint OffsetIndex = VertexId % 8;
	
    float3 Offset = PositionOffsets[OffsetIndex];
    float3 Coords = float3(VoxelVF.VertexFetch_VoxelPositionBuffer[InstanceId].xzy);
    return BoundsMin.xzy + (Coords + Offset) * BoundsDim;
}

/**
 * Fetches the Voxel's color from the Voxel color buffer
 *
 * @param Input the vertex factory input
 *
 * @return the color of the Voxel
 */
half4 GetVoxelColor(FVertexFactoryInput Input)
{
	// InstanceId will always be zero if we're using a single color for all Voxels, otherwise it will be the buffer index
	uint InstanceId = Input.VertexId / 48;
    float3 yCbCr = VoxelVF.VertexFetch_VoxelColorBuffer[InstanceId].rgb;
    float4x4 transform = float4x4(
                    1.0000, 1.0000, 1.0000, 0.0000,
                    0.0000, -0.3441, 1.7720, 0.0000,
                    1.4020, -0.7141, 0.0000, 0.0000,
                    -0.7010, 0.5291, -0.8860, 1.0000
                    );
    return half4(mul(float4(yCbCr, 1.0), transform));
}




/**
 * Computes intermediates for the given vertex.
 *
 * @param Input - Vertex attributes.
 *
 * @returns the computed intermediate values.
 */
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	// Load the position from the float stream
    float3 LoadedPosition = GetVoxelLocation(Input.VertexId);
	// Transform position to (post-view-translation) world space
    float4 VertexWorldPosition = TransformLocalToTranslatedWorld(LoadedPosition.xyz);
	
    //float3 TangentUp, TangentRight;
    //GetVoxelTangents(TangentUp, TangentRight, VertexWorldPosition);
	
	// Build and return the set of intermediates
	FVertexFactoryIntermediates Intermediates;
#if EVERCOAST_ON_UE5
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
#endif
	Intermediates.Position = VertexWorldPosition;
    Intermediates.TangentToLocal = GetVoxelTangentToLocal(Input.VertexId);
    Intermediates.TangentToWorld = mul(Intermediates.TangentToLocal, GetLocalToWorld3x3());
#if EVERCOAST_ON_UE5
	Intermediates.TangentToWorldSign = Intermediates.SceneData.InstanceData.DeterminantSign;
#else
	Intermediates.TangentToWorldSign = Primitive.InvNonUniformScaleAndDeterminantSign.w;
#endif
	Intermediates.Color = GetVoxelColor(Input);

	return Intermediates;
}

/**
 * Computes material parameterss for a given pixel.
 *
 * @param Interpolants - Attributes interpolated from the vertex shader.
 *
 * @returns per-pixel material parameters.
 */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

	// Note that a non-zero texture coordinate is used to prevent the compiler
	// from optimizing out texture lookups that can cause mandatory requirements
	// to not be bound.

#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.DummyTexCoord;
	}
#endif	//NUM_MATERIAL_TEXCOORDS

    Result.VertexColor = Interpolants.Color;
    half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
    half4 TangentToWorld2 = Interpolants.TangentToWorld2;
    Result.UnMirrored = TangentToWorld2.w;
    Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	Result.TwoSidedSign = 1;
	return Result;
}

/**
 * Computes material parameters for a given vertex.
 *
 * @param Input - Attributes for this vertex.
 * @param Intermediates - Intermediates computed for this vertex.
 * @param WorldPosition - The position of this vertex in world space.
 * @param TangentToLocal - The tangent basis for this vertex.
 *
 * @returns per-vertex material parameters.
 */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
#if EVERCOAST_ON_UE5
	Result.SceneData = Intermediates.SceneData;
#endif
	Result.WorldPosition = WorldPosition;
    Result.VertexColor = Intermediates.Color;
    Result.TangentToWorld = Intermediates.TangentToWorld;
    Result.PreSkinnedNormal = TangentToLocal[2];
    Result.PreSkinnedPosition = WorldPosition;
	return Result;
}

/**
 * Computes the world space position of this vertex.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the position of this vertex in world space.
 */
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input)
{
    return TransformLocalToTranslatedWorld(GetVoxelLocation(Input.VertexId));
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.Position;
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

/**
 * Constructs values that need to be interpolated from the vertex shader to the pixel shader.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns interpolants.
 */
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
    FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS) 0;
    Interpolants.TangentToWorld0 = float4(Intermediates.TangentToWorld[0], 0);
    Interpolants.TangentToWorld2 = float4(Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	Interpolants.DummyTexCoord = float2(0,0);

	Interpolants.Color = Intermediates.Color;

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif
	
	return Interpolants;
}

/**
 * Computes the position of this vertex last frame in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the previous position of this vertex in world space.
 */
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetWorldPosition(Input, Intermediates);
}

/**
 * Computes the tangent basis for this vertex in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the tangent basis for this vertex in world space.
 */
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.TangentToLocal;
}

#if INSTANCED_STEREO
uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return 0;
}
#endif

#if USE_INSTANCING
float4 VertexFactoryGetInstanceHitProxyId(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates) { return 0; }
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input)
{
    return mul(GetVoxelTangentToLocal(Input.VertexId), GetLocalToWorld3x3())[2];
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.TangentToWorld[2];
}

#if NEEDS_VERTEX_FACTORY_INTERPOLATION
	struct FVertexFactoryRayTracingInterpolants
	{
		FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
	};

	float2 VertexFactoryGetRayTracingTextureCoordinate( FVertexFactoryRayTracingInterpolants Interpolants )
	{
#if NUM_MATERIAL_TEXCOORDS
		return Interpolants.InterpolantsVSToPS.TexCoords.xy;
#else // #if NUM_MATERIAL_TEXCOORDS
		return float2(0,0);
#endif // #if NUM_MATERIAL_TEXCOORDS
	}

	FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryRayTracingInterpolants Input)
	{
		return Input.InterpolantsVSToPS;
	}

	FVertexFactoryRayTracingInterpolants VertexFactoryGetRayTracingInterpolants(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
	{
		FVertexFactoryRayTracingInterpolants Interpolants;
		Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
		return Interpolants;
	}

	FVertexFactoryRayTracingInterpolants VertexFactoryInterpolate(FVertexFactoryRayTracingInterpolants a, float aInterp, FVertexFactoryRayTracingInterpolants b, float bInterp)
	{
		FVertexFactoryRayTracingInterpolants O;
	
		// Do we really need to interpolate TangentToWorld2 here? It should be replaced by the
		// interpolated normal from 'whatever' interpolation scheme we're using
	
		INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
		INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);

#if INTERPOLATE_VERTEX_COLOR
		INTERPOLATE_MEMBER(InterpolantsVSToPS.Color);
#endif

#if NUM_TEX_COORD_INTERPOLATORS
		INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords);
#endif

		return O;
	}
#endif // #if NEEDS_VERTEX_FACTORY_INTERPOLATION

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	return Interpolants.PrimitiveId;
#else
	return 0;
#endif
}

#if EVERCOAST_ON_UE5


#ifndef VF_IMPLEMENTED_GET_VIEW_INDEX
#define VF_IMPLEMENTED_GET_VIEW_INDEX

uint VertexFactoryGetViewIndex(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.ViewIndex;
}

uint VertexFactoryGetInstanceIdLoadIndex(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.InstanceIdLoadIndex;
}

FLWCMatrix VertexFactoryGetLocalToWorld(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.InstanceData.LocalToWorld;
}

FLWCInverseMatrix VertexFactoryGetWorldToLocal(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.InstanceData.WorldToLocal;
}

#if POSITION_ONLY

uint VertexFactoryGetViewIndex(FVertexFactoryInput Input)
{
	FSceneDataIntermediates SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	return SceneData.ViewIndex;
}

uint VertexFactoryGetInstanceIdLoadIndex(FVertexFactoryInput Input)
{
	FSceneDataIntermediates SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	return SceneData.InstanceIdLoadIndex;
}

#endif // POSITION_ONLY

#endif // VF_IMPLEMENTED_GET_VIEW_INDEX

#endif
